# This should be replaced with your course's course-definition.yml

# Used in your course's URL: https://app.codecrafters.io/courses/<slug>
# Example: "redis"
slug: "your_course_slug"

# The name of your course. This will be displayed in the course catalog, and on other course pages.
# Example: "Build your own Redis"
name: "Build your own something"

# A short name for your course, this'll be used in copy like emails.
# Example: "Redis"
short_name: "dummy"

# The release status for your course.
#
# - alpha: Only visible to yourself and CodeCrafters staff.
# - beta: Visible to all CodeCrafters users, but with a "beta" label.
# - live: Visible to all CodeCrafters users, no label.
#
# Allowed values: "alpha", "beta", "live"
release_status: "alpha"

# This is shown on the course overview page. Markdown supported, recommended length ~30 words.
#
# Recommended format:
#
# > In this challenge, you'll build ABC that's capable of D, E, F and G. Along the way, we'll learn about X, Y, Z and more.
#
# Example:
#
# > In this challenge, you'll build a toy Redis clone that's capable of handling basic commands like PING, GET
# > and SET. Along the way, we'll learn about event loops, the Redis Protocol and more.
description_md: |-
  Add a description for your course here.

# This is shown on the catalog. Plaintext only, recommended length ~10 words.
#
# Recommended format:
#
# > Learn about X, Y, Z and more
#
# Example:
#
# > Learn about TCP servers, the Redis protocol and more
#
# **TODO**: Remove _md suffix since markdown isn't supported
short_description_md: |-
  Add a short description for your course here.

# The percentage of users who complete your course. We'll calculate this automatically in the future, safe to ignore for now.
completion_percentage: 15

# The languages that your course supports.
languages:
  - slug: "go"
  - slug: "python"
  - slug: "rust"

marketing:
  # Shown in the catalog.
  #
  # Recommended guidelines:
  #
  # - "easy": < 2h of work for an experienced developer
  # - "medium": > 6h of work for an experienced developer
  # - "hard": > 6h of work for an experienced developer
  #
  # Allowed values: "easy", "medium", "hard"
  difficulty: medium

  # This is shown as an example when users suggest extensions to your course.
  # Example: "Persistence" (from the Redis challenge)
  sample_extension_idea_title: "My course extension idea"

  # This is shown as an example when users suggest extensions to your course.
  # Example: "A Redis server that can read and write .rdb files" (from the Redis challenge)
  sample_extension_idea_description: "A description for my course extension idea"

  # These are some default testimonials that you can use. Feel free to switch these out with your own.
  testimonials:
    - author_name: "Ananthalakshmi Sankar"
      author_description: "Automation Engineer at Apple"
      author_avatar: "https://codecrafters.io/images/external/testimonials/oxta.jpeg"
      link: "https://github.com/anu294"
      text: "There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!"

    - author_name: "Patrick Burris"
      author_description: "Senior Software Developer, CenturyLink"
      author_avatar: "https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg"
      link: "https://github.com/Jumballaya"
      text: |-
        I think the instant feedback right there in the git push is really cool.
        Didn't even know that was possible!

stages:
  - legacy_slug: "init"
    slug: "oq4"
    name: "Read header"
    difficulty: very_easy
    description_md: |-
      In this stage, you'll add support for concurrent connections.

      ### Tests

      The tester will execute your program like this:
      ```bash
      $ ./your_server.sh
      ```

      Then, the tester will create multiple concurrent TCP connections to your server. (The exact number of connections is determined at random.) After that, the tester will send a single `GET` request through each of the connections.
      ```bash
      $ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
      $ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
      $ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
      ```

      Your server must respond to each request with the following response:
      ```javascript
      HTTP/1.1 200 OK\r\n\r\n
      ```
    marketing_md: |-
      In this stage, we'll do XYZ.
